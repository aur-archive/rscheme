.TH RS 1
.SH NAME
rs \- An RScheme Interpreter
.SH SYNOPSIS
.B rs
.I 
.RI "[options]"
.SH "DESCRIPTION"
This manual page documents briefly the
.BR rs
command.
.PP
RScheme is a scheme interpreter and compiler with object extensions,
threads, a persistent store, an optional real-time garbage collector,
and many other nifty features.
.P
The RScheme executable program in a unix-like environment accepts
several switches, options, and arguments.
.P
When the system starts up, the first thing it does is load the system
image. When RScheme is configured, a default location for the system
image is defined, and that location is compiled into the executable
image. On a Debian system, the image is sought in
\fI/usr/lib/rscheme/resource/system.img\fR.
.P
After loading the system image, the internal start function is called
which executes the initialization procedures and then calls the
current main function with the command line arguments in a list.

.SH COMMAND-LINE OPTIONS
.TP
.B \-\-version
Print out the version and exit.
.TP
.B \-image
Use an alternate system image file.
.TP
.B \-q
Suppress output of greetings.
.TP  
.B \-qimage
Use an alternate system image file and suppress.
.TP
.B \-script
Suppress output of greetings and set script mode.
.TP
.B \-bcitrace
Turn on tracing of bytecodes; the system must have been configured
with the \fB\-\-enable-debug\fR flag to make use of this flag.
.TP
.B \-abt
 Turn on apply backtrace tracing from the start. Useful in some cases when turning it on at runtime (using \fB,fg-abt\fR) doesn't work.

.SH REPL ARGUMENT PROCESSING

As built, the \fImain\fR function comes form the \fIrepl\fR module,
which interprets the arguments as flags and names of files to be
loaded. The following flags are understood:
.TP
.B \-c \fIpath\fR
Save bootable image.
.TP
.B \-c.repl \fIpath\fR
Save bootable image with REPL's main as the main function.
.TP
.B \-\-
Interpret remaining arguments as application arguments.
.TP
.B \-exit
Exit successfully.
.TP
.B \-e \fIexpr\fR
Evaluate expression \fIexpr\fR.
.TP
.B \-m [\fImodule\fR=]\fIfile\fR
Link module \fImodule\fR from mif at \fIfile\fR. If module is not specified,
the name will be the base name in \fIfile\fR.
.TP
.B +\fImodule\fR
Import module \fImodule\fR

.P
The default behavior is to interpret each of the other command-line
arguments as the name of a file to load.
.P
When we start the RScheme system, we can use command-line arguments to
incorporate compiled modules and to execute expressions, and possibly
to save the resulting image to an image file. The general syntax of
the rs command is described above.
.P
Each module-or-eval-argument is handled in the order given on the
command line and can be -m foo.mif, +foo, or -e expr. Using -m foo.mif
means that the code for the module foo is loaded into RScheme, but the
exported variables in foo are not made visible until a ,(use foo)
command is executed. Using +foo means that the module is loaded in the
same way as with -m foo.mif, but in addition the exported variables in
foo are made visible to the current module as if ,(use foo) had been
typed. Using -e expr means evaluating an RScheme expression. Thus rs
+foo is rougly equivalent to rs -m foo.mif -e ",(use foo)", but -e can
of course be used to evaluate any valid RScheme expression.
.P
Finally, the argument -c file.img saves the RScheme image resulting
from the other arguments.

.SH SEE ALSO
.BR rsc(1), fshell(1)
.P
The RScheme manual can be found at
\fIhttp://www.rscheme.org/rs/doc.prepub/db/Welcome.html\fR.
On a Debian system the manual is available in html format at
\fI/usr/share/doc/rscheme/html/\fR or through the dhelp help system.

.SH AUTHOR
Donovan Kolbly <d.kolbly@rscheme.org>

This man page was written for Debian, but may be used by others.
